{"/home/travis/build/npmtest/node-npmtest-ng2-page-scroll/test.js":"/* istanbul instrument in package npmtest_ng2_page_scroll */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ng2-page-scroll/lib.npmtest_ng2_page_scroll.js":"/* istanbul instrument in package npmtest_ng2_page_scroll */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ng2_page_scroll = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ng2_page_scroll = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ng2-page-scroll/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ng2-page-scroll && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ng2_page_scroll */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ng2_page_scroll\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ng2_page_scroll.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ng2_page_scroll.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ng2_page_scroll.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ng2_page_scroll.__dirname + '/lib.npmtest_ng2_page_scroll.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ng2-page-scroll/node_modules/ng2-page-scroll/bundles/ng2-page-scroll.umd.js":"(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/router'), require('@angular/platform-browser'), require('@angular/common')) :\n\ttypeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/router', '@angular/platform-browser', '@angular/common'], factory) :\n\t(factory((global.ng2 = global.ng2 || {}, global.ng2.page = global.ng2.page || {}, global.ng2.page.scroll = global.ng2.page.scroll || {}),global.ng.core,global.ng.router,global.ng['platform-browser'],global.ng.common));\n}(this, (function (exports,_angular_core,_angular_router,_angular_platformBrowser,_angular_common) { 'use strict';\n\nvar EasingLogic = (function () {\n    function EasingLogic() {\n    }\n    return EasingLogic;\n}());\nvar PageScrollConfig = (function () {\n    function PageScrollConfig() {\n    }\n    Object.defineProperty(PageScrollConfig, \"defaultEasingLogic\", {\n        // Getter and setter to avoid auto completion to suggest calling the method\n        get: function () {\n            return PageScrollConfig._easingLogic;\n        },\n        set: function (easingLogic) {\n            PageScrollConfig._easingLogic = easingLogic;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PageScrollConfig;\n}());\n/**\n * The number of milliseconds to wait till updating the scroll position again.\n * Small amounts may produce smoother animations but require more processing power.\n * @type {number}\n * @private\n */\nPageScrollConfig._interval = 10;\n/**\n * The amount of pixels that need to be between the current scrollTop/scrollLeft position\n * and the target position the cause a scroll animation. In case distance is below\n * this threshold, an immediate jump will be performed.\n * Due to dpi or rounding irregularities in browsers floating point numbers for scrollTop/scrollLeft values\n * are possible, making a === comparison of current scrollTop or scrollLeft and target scrollPosition error-prone.\n * @type {number}\n * @private\n */\nPageScrollConfig._minScrollDistance = 2;\n/**\n * Name of the default namespace.\n * @type {string}\n * @private\n */\nPageScrollConfig._defaultNamespace = 'default';\n/**\n * Whether by default the scrolling should happen in vertical direction (by manipulating the scrollTop property)\n * (= true; default) or in horizontal direction (by manipulating the scrollLeft property) (= false\n * @type {boolean}\n */\nPageScrollConfig.defaultIsVerticalScrolling = true;\n/**\n * How many console logs should be emitted.\n * 0: None\n * 2: If animation could not be started due to missing target, \"already at destination\" or similar reasons\n * 5: All scroll position values that get set\n * @type {boolean}\n * @private\n */\nPageScrollConfig._logLevel = 2;\n/**\n * The duration how long a scrollTo animation should last by default.\n * May be overridden using the page-scroll-duration attribute on a single ng2PageScroll instance.\n * @type {number}\n */\nPageScrollConfig.defaultDuration = 1250;\n/**\n * The distance in pixels above scroll target where the animation should stop. Setting a positive number results in\n * the scroll target being more in the middle of the screen, negative numbers will produce scrolling \"too far\"\n * @type {number}\n */\nPageScrollConfig.defaultScrollOffset = 0;\n/**\n * Whether by default for inline scroll animations the advanced offset calculation should take place (true) or\n * not (false). Default is false.\n * The advanced offset calculation will traverse the DOM tree upwards, starting at the scrollTarget, until it finds\n * the scrollingView container element. Along the way the offset positions of the relative positioned\n * (position: relative) elements will be taken into account for calculating the target elements position.\n * @type {boolean}\n */\nPageScrollConfig.defaultAdvancedInlineOffsetCalculation = false;\n/**\n * The events that are listened to on the body to decide whether a scroll animation has been interfered/interrupted by the user\n * @type {string[]}\n * @private\n */\nPageScrollConfig._interruptEvents = ['mousedown', 'wheel', 'DOMMouseScroll', 'mousewheel', 'keyup', 'touchmove'];\n/**\n * The keys that are considered to interrupt a scroll animation (mainly the arrow keys). All other key presses will not stop the\n * scroll animation.\n * @type {number[]}\n * @private\n */\nPageScrollConfig._interruptKeys = [33, 34, 35, 36, 38, 40];\n/**\n * Whether a scroll animation should be interruptible by user interaction (true) or not (false). If the user performs an\n * interrupting event while a scroll animation takes place, the scroll animation stops.\n * @type {boolean}\n */\nPageScrollConfig.defaultInterruptible = true;\nPageScrollConfig._easingLogic = {\n    ease: function (t, b, c, d) {\n        // Linear easing\n        return c * t / d + b;\n    }\n};\n\n/**\n * Created by sebastianfuss on 02.09.16.\n */\nvar PageScrollUtilService = (function () {\n    function PageScrollUtilService() {\n    }\n    /**\n     * Util method to check whether a given variable is either undefined or null\n     * @param variable\n     * @returns {boolean} true the variable is undefined or null\n     */\n    PageScrollUtilService.isUndefinedOrNull = function (variable) {\n        return (typeof variable === 'undefined') || variable === undefined || variable === null;\n    };\n    PageScrollUtilService.extractElementPosition = function (document, scrollTargetElement) {\n        var body = document.body;\n        var docEl = document.documentElement;\n        var windowPageYOffset = document.defaultView && document.defaultView.pageYOffset || undefined;\n        var windowPageXOffset = document.defaultView && document.defaultView.pageXOffset || undefined;\n        var scrollTop = windowPageYOffset || docEl.scrollTop || body.scrollTop;\n        var scrollLeft = windowPageXOffset || docEl.scrollLeft || body.scrollLeft;\n        var clientTop = docEl.clientTop || body.clientTop || 0;\n        var clientLeft = docEl.clientLeft || body.clientLeft || 0;\n        if (PageScrollUtilService.isUndefinedOrNull(scrollTargetElement)) {\n            // No element found, so return the current position to not cause any change in scroll position\n            return { top: scrollTop, left: scrollLeft };\n        }\n        var box = scrollTargetElement.getBoundingClientRect();\n        var top = box.top + scrollTop - clientTop;\n        var left = box.left + scrollLeft - clientLeft;\n        return { top: Math.round(top), left: Math.round(left) };\n    };\n    return PageScrollUtilService;\n}());\n\nvar PageScrollService = (function () {\n    function PageScrollService() {\n        var _this = this;\n        this.runningInstances = [];\n        this.onInterrupted = {\n            report: function (event, pageScrollInstance) {\n                if (!pageScrollInstance.interruptible) {\n                    // Non-interruptible anyway, so do not stop anything\n                    return;\n                }\n                var shouldStop = true;\n                if (event.type === 'keyup') {\n                    // Only stop if specific keys have been pressed, for all others don't stop anything\n                    if (PageScrollConfig._interruptKeys.indexOf(event.keyCode) === -1) {\n                        // The pressed key is not in the list of interrupting keys\n                        shouldStop = false;\n                    }\n                }\n                else if (event.type === 'mousedown') {\n                    // For mousedown events we only stop the scroll animation of the mouse has\n                    // been clicked inside the scrolling container\n                    if (!pageScrollInstance.scrollingViews.some(function (scrollingView) { return scrollingView.contains(event.target); })) {\n                        // Mouse clicked an element which is not inside any of the the scrolling containers\n                        shouldStop = false;\n                    }\n                }\n                if (shouldStop) {\n                    _this.stopAll(pageScrollInstance.namespace);\n                }\n            }\n        };\n        if (PageScrollService.instanceCounter > 0 && _angular_core.isDevMode()) {\n            console.warn('An instance of PageScrollService already exists, usually ' +\n                'including one provider should be enough, so double check.');\n        }\n        PageScrollService.instanceCounter++;\n    }\n    PageScrollService.prototype.stopInternal = function (interrupted, pageScrollInstance) {\n        var index = this.runningInstances.indexOf(pageScrollInstance);\n        if (index >= 0) {\n            this.runningInstances.splice(index, 1);\n        }\n        if (pageScrollInstance.interruptListenersAttached) {\n            pageScrollInstance.detachInterruptListeners();\n        }\n        if (pageScrollInstance.timer) {\n            // Clear/Stop the timer\n            clearInterval(pageScrollInstance.timer);\n            // Clear the reference to this timer\n            pageScrollInstance.timer = undefined;\n            pageScrollInstance.fireEvent(!interrupted);\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Start a scroll animation. All properties of the animation are stored in the given {@link PageScrollInstance} object.\n     *\n     * This is the core functionality of the whole library.\n     *\n     * @param pageScrollInstance\n     */\n    PageScrollService.prototype.start = function (pageScrollInstance) {\n        var _this = this;\n        // Stop all possibly running scroll animations in the same namespace\n        this.stopAll(pageScrollInstance.namespace);\n        if (pageScrollInstance.scrollingViews === null || pageScrollInstance.scrollingViews.length === 0) {\n            // No scrollingViews specified, thus we can't animate anything\n            if (_angular_core.isDevMode()) {\n                console.warn('No scrollingViews specified, this ng2-page-scroll does not know which DOM elements to scroll');\n            }\n            return;\n        }\n        var startScrollPositionFound = false;\n        // Reset start scroll position to 0. If any of the scrollingViews has a different one, it will be extracted next\n        pageScrollInstance.startScrollPosition = 0;\n        // Get the start scroll position from the scrollingViews (e.g. if the user already scrolled down the content)\n        pageScrollInstance.scrollingViews.forEach(function (scrollingView) {\n            if (PageScrollUtilService.isUndefinedOrNull(scrollingView)) {\n                return;\n            }\n            // Get the scrollTop or scrollLeft value of the first scrollingView that returns a value for its \"scrollTop\"\n            // or \"scrollLeft\" property that is not undefined and unequal to 0\n            var scrollPosition = pageScrollInstance.getScrollPropertyValue(scrollingView);\n            if (!startScrollPositionFound && scrollPosition) {\n                // We found a scrollingView that does not have scrollTop or scrollLeft 0\n                // Return the scroll position value, as this will be our startScrollPosition\n                pageScrollInstance.startScrollPosition = scrollPosition;\n                startScrollPositionFound = true;\n            }\n        });\n        var pageScrollOffset = pageScrollInstance.getCurrentOffset();\n        // Calculate the target position that the scroll animation should go to\n        var scrollTargetPosition = pageScrollInstance.extractScrollTargetPosition();\n        pageScrollInstance.targetScrollPosition = Math.round((pageScrollInstance.verticalScrolling ? scrollTargetPosition.top : scrollTargetPosition.left) - pageScrollOffset);\n        // Calculate the distance we need to go in total\n        pageScrollInstance.distanceToScroll = pageScrollInstance.targetScrollPosition - pageScrollInstance.startScrollPosition;\n        if (isNaN(pageScrollInstance.distanceToScroll)) {\n            // We weren't able to find the target position, maybe the element does not exist?\n            if (_angular_core.isDevMode()) {\n                console.log('Scrolling not possible, as we can\\'t find the specified target');\n            }\n            pageScrollInstance.fireEvent(false);\n            return;\n        }\n        // We're at the final destination already\n        // OR we need to scroll down but are already at the end\n        // OR we need to scroll up but are at the top already\n        var allReadyAtDestination = Math.abs(pageScrollInstance.distanceToScroll) < PageScrollConfig._minScrollDistance;\n        // Check how long we need to scroll if a speed option is given\n        // Default executionDuration is the specified duration\n        pageScrollInstance.executionDuration = pageScrollInstance.duration;\n        // Maybe we need to pay attention to the speed option?\n        if (!PageScrollUtilService.isUndefinedOrNull(pageScrollInstance.speed) && PageScrollUtilService.isUndefinedOrNull(pageScrollInstance.duration)) {\n            // Speed option is set and no duration => calculate duration based on speed and scroll distance\n            pageScrollInstance.executionDuration = pageScrollInstance.distanceToScroll / pageScrollInstance.speed * 1000;\n        }\n        // We should go there directly, as our \"animation\" would have one big step\n        // only anyway and this way we save the interval stuff\n        var tooShortInterval = pageScrollInstance.executionDuration <= PageScrollConfig._interval;\n        if (allReadyAtDestination || tooShortInterval) {\n            if (_angular_core.isDevMode()) {\n                if (allReadyAtDestination) {\n                    console.log('Scrolling not possible, as we can\\'t get any closer to the destination');\n                }\n                else {\n                    console.log('Scroll duration shorter that interval length, jumping to target');\n                }\n            }\n            pageScrollInstance.setScrollPosition(pageScrollInstance.targetScrollPosition);\n            pageScrollInstance.fireEvent(true);\n            return;\n        }\n        // Register the interrupt listeners if we want an interruptible scroll animation\n        if (pageScrollInstance.interruptible ||\n            (PageScrollUtilService.isUndefinedOrNull(pageScrollInstance.interruptible) && PageScrollConfig.defaultInterruptible)) {\n            pageScrollInstance.attachInterruptListeners(this.onInterrupted);\n        }\n        // Let's get started, get the start time...\n        pageScrollInstance.startTime = new Date().getTime();\n        // .. and calculate the end time (when we need to finish at last)\n        pageScrollInstance.endTime = pageScrollInstance.startTime + pageScrollInstance.executionDuration;\n        pageScrollInstance.timer = setInterval(function (_pageScrollInstance) {\n            // Take the current time\n            var currentTime = new Date().getTime();\n            // Determine the new scroll position\n            var newScrollPosition;\n            var stopNow = false;\n            if (_pageScrollInstance.endTime <= currentTime) {\n                // We're over the time already, so go the targetScrollPosition (aka destination)\n                newScrollPosition = _pageScrollInstance.targetScrollPosition;\n                stopNow = true;\n            }\n            else {\n                // Calculate the scroll position based on the current time using the easing function\n                newScrollPosition = Math.round(_pageScrollInstance.easingLogic.ease(currentTime - _pageScrollInstance.startTime, _pageScrollInstance.startScrollPosition, _pageScrollInstance.distanceToScroll, _pageScrollInstance.executionDuration));\n            }\n            // Set the new scrollPosition to all scrollingViews elements\n            if (!_pageScrollInstance.setScrollPosition(newScrollPosition)) {\n                // Setting the new scrollTop/scrollLeft value failed for all ScrollingViews\n                // early stop the scroll animation to save resources\n                stopNow = true;\n            }\n            // At the end do the internal stop maintenance and fire the pageScrollFinish event\n            // (otherwise the event might arrive at \"too early\")\n            if (stopNow) {\n                _this.stopInternal(false, _pageScrollInstance);\n            }\n        }, PageScrollConfig._interval, pageScrollInstance);\n        // Register the instance as running one\n        this.runningInstances.push(pageScrollInstance);\n    };\n    /**\n     * Stop all running scroll animations. Optionally limit to stop only the ones of specific namespace.\n     *\n     * @param namespace\n     * @returns {boolean}\n     */\n    PageScrollService.prototype.stopAll = function (namespace) {\n        if (this.runningInstances.length > 0) {\n            var stoppedSome = false;\n            for (var i = 0; i < this.runningInstances.length; ++i) {\n                var pageScrollInstance = this.runningInstances[i];\n                if (PageScrollUtilService.isUndefinedOrNull(namespace) || namespace.length === 0 ||\n                    pageScrollInstance.namespace === namespace) {\n                    stoppedSome = true;\n                    this.stopInternal(true, pageScrollInstance);\n                    // Decrease the counter, as we removed an item from the array we iterate over\n                    i--;\n                }\n            }\n            return stoppedSome;\n        }\n        return false;\n    };\n    PageScrollService.prototype.stop = function (pageScrollInstance) {\n        return this.stopInternal(true, pageScrollInstance);\n    };\n    return PageScrollService;\n}());\nPageScrollService.instanceCounter = 0;\nPageScrollService.decorators = [\n    { type: _angular_core.Injectable },\n];\n/** @nocollapse */\nPageScrollService.ctorParameters = function () { return []; };\n\n/**\n * Created by sebastianfuss on 29.08.16.\n */\n/**\n * Represents a scrolling action\n */\nvar PageScrollInstance = (function () {\n    /**\n     * Private constructor, requires the properties assumed to be the bare minimum.\n     * Use the factory methods to create instances:\n     *      {@link PageScrollInstance#simpleInstance}\n     *      {@link PageScrollInstance#newInstance}\n     * @param namespace\n     * @param document\n     */\n    function PageScrollInstance(namespace, document) {\n        /**\n         * These properties will be set during instance construction and default to their defaults from PageScrollConfig\n         */\n        /* A namespace to \"group\" scroll animations together and stopping some does not stop others */\n        this._namespace = PageScrollConfig._defaultNamespace;\n        /* Whether we scroll vertically (true) or horizontally (false) */\n        this._verticalScrolling = PageScrollConfig.defaultIsVerticalScrolling;\n        /* Offset in px that the animation should stop above that target element */\n        this._offset = PageScrollConfig.defaultScrollOffset;\n        /* Duration in milliseconds the scroll animation should last */\n        this._duration = PageScrollConfig.defaultDuration;\n        /* Easing function to manipulate the scrollTop/scrollLeft value over time */\n        this._easingLogic = PageScrollConfig.defaultEasingLogic;\n        /* Boolean whether the scroll animation should stop on user interruption or not */\n        this._interruptible = PageScrollConfig.defaultInterruptible;\n        /* Whether the advanded offset calculation for inline scrolling should be used */\n        this._advancedInlineOffsetCalculation = PageScrollConfig.defaultAdvancedInlineOffsetCalculation;\n        /* Event emitter to notify the world about the scrolling */\n        this._pageScrollFinish = new _angular_core.EventEmitter();\n        /**\n         * These properties will be set/manipulated if the scroll animation starts\n         */\n        /* The initial value of the scrollTop or scrollLeft position when the animation starts */\n        this._startScrollPosition = 0;\n        /* Whether an interrupt listener is attached to the body or not */\n        this._interruptListenersAttached = false;\n        /* References to the timer instance that is used to perform the scroll animation to be\n         able to clear it on animation end*/\n        this._timer = null;\n        this._namespace = namespace;\n        this.document = document;\n    }\n    /*\n     * Factory methods for instance creation\n     */\n    PageScrollInstance.simpleInstance = function (document, scrollTarget, namespace) {\n        return PageScrollInstance.newInstance({\n            document: document,\n            scrollTarget: scrollTarget,\n            namespace: namespace\n        });\n    };\n    PageScrollInstance.newInstance = function (options) {\n        if (PageScrollUtilService.isUndefinedOrNull(options.namespace) || options.namespace.length <= 0) {\n            options.namespace = PageScrollConfig._defaultNamespace;\n        }\n        var pageScrollInstance = new PageScrollInstance(options.namespace, document);\n        if (PageScrollUtilService.isUndefinedOrNull(options.scrollingViews) || options.scrollingViews.length === 0) {\n            pageScrollInstance._isInlineScrolling = false;\n            pageScrollInstance._scrollingViews = [document.documentElement, document.body, document.body.parentNode];\n        }\n        else {\n            pageScrollInstance._isInlineScrolling = true;\n            pageScrollInstance._scrollingViews = options.scrollingViews;\n        }\n        pageScrollInstance._scrollTarget = options.scrollTarget;\n        if (!PageScrollUtilService.isUndefinedOrNull(options.verticalScrolling)) {\n            pageScrollInstance._verticalScrolling = options.verticalScrolling;\n        }\n        if (!PageScrollUtilService.isUndefinedOrNull(options.pageScrollOffset)) {\n            pageScrollInstance._offset = options.pageScrollOffset;\n        }\n        if (!PageScrollUtilService.isUndefinedOrNull(options.pageScrollEasingLogic)) {\n            pageScrollInstance._easingLogic = options.pageScrollEasingLogic;\n        }\n        if (PageScrollUtilService.isUndefinedOrNull(options.pageScrollDuration) && !PageScrollUtilService.isUndefinedOrNull(options.pageScrollSpeed)) {\n            // No duration specified in the options, only in this case we use the speed option when present\n            pageScrollInstance._speed = options.pageScrollSpeed;\n            pageScrollInstance._duration = undefined;\n        }\n        else if (!PageScrollUtilService.isUndefinedOrNull(options.pageScrollDuration)) {\n            pageScrollInstance._duration = options.pageScrollDuration;\n        }\n        if (!PageScrollUtilService.isUndefinedOrNull(options.pageScrollFinishListener)) {\n            pageScrollInstance._pageScrollFinish = options.pageScrollFinishListener;\n        }\n        pageScrollInstance._interruptible = options.pageScrollInterruptible ||\n            (PageScrollUtilService.isUndefinedOrNull(options.pageScrollInterruptible) && PageScrollConfig.defaultInterruptible);\n        pageScrollInstance._advancedInlineOffsetCalculation = options.advancedInlineOffsetCalculation ||\n            (PageScrollUtilService.isUndefinedOrNull(options.advancedInlineOffsetCalculation) &&\n                PageScrollConfig.defaultAdvancedInlineOffsetCalculation);\n        return pageScrollInstance;\n    };\n    /**\n     * Create a PageScrollInstance representing a scroll animation on the documents body.\n     *\n     * @param document The document that contains the body to be scrolled and the scrollTarget elements\n     * @param scrollTarget Where to scroll to. Can be a HTMLElement reference or a string like '#elementId'\n     * @param verticalScrolling\n     * @param namespace Optional namespace to group scroll animations logically\n     * @returns {PageScrollInstance}\n     *\n     * @deprecated Use {@link newInstance(options: PageScrollOptions)}\n     **/\n    PageScrollInstance.simpleDirectionInstance = function (document, scrollTarget, verticalScrolling, namespace) {\n        return PageScrollInstance.newInstance({\n            document: document,\n            scrollTarget: scrollTarget,\n            namespace: namespace,\n            verticalScrolling: verticalScrolling,\n        });\n    };\n    /**\n     * Create a PageScrollInstance representing a scroll animation to the target element where the scrollingView\n     * elements get scrolled (like a div container with fixed height, resulting in scrollbars in it).\n     *\n     * Make sure that the scrollTarget is located inside the scrollingView in the DOM hierarchy, otherwise the\n     * scrollingView will be scrolled to an apparently arbitrary position.\n     *\n     * @param document The document that contains the body to be scrolled and the scrollTarget elements\n     * @param scrollTarget Where to scroll to. Can be a HTMLElement reference or a string like '#elementId'\n     * @param scrollingView The element that should be scrolled\n     * @param namespace Optional namespace to group scroll animations logically\n     * @returns {PageScrollInstance}\n     *\n     * @deprecated Use {@link newInstance(options: PageScrollOptions)}\n     */\n    PageScrollInstance.simpleInlineInstance = function (document, scrollTarget, scrollingView, namespace) {\n        return PageScrollInstance.newInstance({\n            document: document,\n            scrollTarget: scrollTarget,\n            scrollingViews: [scrollingView],\n            verticalScrolling: true,\n            namespace: namespace\n        });\n    };\n    /**\n     *\n     * @param document The document that contains the body to be scrolled and the scrollTarget elements\n     * @param scrollTarget Where to scroll to. Can be a HTMLElement reference or a string like '#elementId'\n     * @param scrollingView The element that should be scrolled\n     * @param verticalScrolling whether the scrolling should be performed in vertical direction (true, default) or horizontal (false)\n     * @param namespace Optional namespace to group scroll animations logically\n     * @returns {PageScrollInstance}\n     *\n     * @deprecated Use {@link newInstance(options: PageScrollOptions)}\n     */\n    PageScrollInstance.simpleInlineDirectionInstance = function (document, scrollTarget, scrollingView, verticalScrolling, namespace) {\n        return PageScrollInstance.newInstance({\n            document: document,\n            scrollTarget: scrollTarget,\n            scrollingViews: [scrollingView],\n            namespace: namespace,\n            verticalScrolling: verticalScrolling,\n        });\n    };\n    /**\n     *\n     * @param document The document that contains the body to be scrolled and the scrollTarget elements\n     * @param scrollTarget Where to scroll to. Can be a HTMLElement reference or a string like '#elementId'\n     * @param scrollingViews The elements that should be scrolled. Null to use the default elements of document and body.\n     * @param namespace Optional namespace to group scroll animations logically\n     * @param verticalScrolling whether the scrolling should be performed in vertical direction (true, default) or horizontal (false)\n     * @param pageScrollOffset The offset to be attached to the top of the target element or\n     *                          null/undefined to use application default\n     * @param pageScrollInterruptible Whether this scroll animation should be interruptible.\n     *                                 Null/undefined for application default\n     * @param pageScrollEasingLogic Easing function to be used for manipulating the scroll position\n     *                          over time. Null/undefined for application default\n     * @param pageScrollDuration The duration in milliseconds the animation should last.\n     *                            Null/undefined for application default\n     * @param pageScrollFinishListener Listener to be called to notify other parts of the application\n     *                                  that the scroll animation has finished\n     * @returns {PageScrollInstance}\n     *\n     * @deprecated Use {@link newInstance(options: PageScrollOptions)}\n     */\n    PageScrollInstance.advancedInstance = function (document, scrollTarget, scrollingViews, namespace, verticalScrolling, pageScrollOffset, pageScrollInterruptible, pageScrollEasingLogic, pageScrollDuration, pageScrollFinishListener) {\n        return PageScrollInstance.newInstance({\n            document: document,\n            scrollTarget: scrollTarget,\n            scrollingViews: scrollingViews,\n            namespace: namespace,\n            verticalScrolling: verticalScrolling,\n            pageScrollOffset: pageScrollOffset,\n            pageScrollInterruptible: pageScrollInterruptible,\n            pageScrollEasingLogic: pageScrollEasingLogic,\n            pageScrollDuration: pageScrollDuration,\n            pageScrollFinishListener: pageScrollFinishListener\n        });\n    };\n    PageScrollInstance.prototype.getScrollPropertyValue = function (scrollingView) {\n        if (!this.verticalScrolling) {\n            return scrollingView.scrollLeft;\n        }\n        return scrollingView.scrollTop;\n    };\n    /**\n     * Extract the exact location of the scrollTarget element.\n     *\n     * Extract the scrollTarget HTMLElement from the given PageScrollTarget object. The latter one may be\n     * a string like \"#heading2\", then this method returns the corresponding DOM element for that id.\n     *\n     * @returns {HTMLElement}\n     */\n    PageScrollInstance.prototype.extractScrollTargetPosition = function () {\n        var scrollTargetElement;\n        if (typeof this._scrollTarget === 'string') {\n            scrollTargetElement = this.document.getElementById(this._scrollTarget.substr(1));\n        }\n        else {\n            scrollTargetElement = this._scrollTarget;\n        }\n        if (scrollTargetElement === null || scrollTargetElement === undefined) {\n            // Scroll target not found\n            return { top: NaN, left: NaN };\n        }\n        if (this._isInlineScrolling) {\n            var position = { top: scrollTargetElement.offsetTop, left: scrollTargetElement.offsetLeft };\n            if (this._advancedInlineOffsetCalculation && this.scrollingViews.length === 1) {\n                var accumulatedParentsPos = { top: 0, left: 0 };\n                // not named window to make sure we're not getting the global window variable by accident\n                var theWindow = scrollTargetElement.ownerDocument.defaultView;\n                var parentFound = false;\n                // Start parent is the immediate parent\n                var parent_1 = scrollTargetElement.parentElement;\n                // Iterate upwards all parents\n                while (!parentFound && !PageScrollUtilService.isUndefinedOrNull(parent_1)) {\n                    if (theWindow.getComputedStyle(parent_1).getPropertyValue('position') === 'relative') {\n                        accumulatedParentsPos.top += parent_1.offsetTop;\n                        accumulatedParentsPos.left += parent_1.offsetLeft;\n                    }\n                    // Next iteration\n                    parent_1 = parent_1.parentElement;\n                    parentFound = parent_1 === this.scrollingViews[0];\n                }\n                if (parentFound) {\n                    // Only use the results if we found the parent, otherwise we accumulated too much anyway\n                    position.top += accumulatedParentsPos.top;\n                    position.left += accumulatedParentsPos.left;\n                }\n                else {\n                    if (PageScrollConfig._logLevel >= 2) {\n                        console.warn('Unable to find nested scrolling targets parent!');\n                    }\n                }\n            }\n            return position;\n        }\n        return PageScrollUtilService.extractElementPosition(this.document, scrollTargetElement);\n    };\n    /**\n     * Get the top offset of the scroll animation.\n     * This automatically takes the offset location of the scrolling container/scrolling view\n     * into account (for nested/inline scrolling).\n     *\n     * @returns {number}\n     */\n    PageScrollInstance.prototype.getCurrentOffset = function () {\n        return this._offset;\n    };\n    /**\n     * Sets the \"scrollTop\" or \"scrollLeft\" property for all scrollingViews to the provided value\n     * @param position\n     * @return true if at least for one ScrollTopSource the scrollTop/scrollLeft value could be set and it kept the new value.\n     *          false if it failed for all ScrollingViews, meaning that we should stop the animation\n     *          (probably because we're at the end of the scrolling region)\n     */\n    PageScrollInstance.prototype.setScrollPosition = function (position) {\n        var _this = this;\n        if (PageScrollConfig._logLevel >= 5) {\n            console.warn('Scroll Position: ' + position);\n        }\n        // Set the new scrollTop/scrollLeft to all scrollingViews elements\n        return this.scrollingViews.reduce(function (oneAlreadyWorked, scrollingView) {\n            var startScrollPropertyValue = _this.getScrollPropertyValue(scrollingView);\n            if (scrollingView && !PageScrollUtilService.isUndefinedOrNull(startScrollPropertyValue)) {\n                var scrollDistance = Math.abs(startScrollPropertyValue - position);\n                // The movement we need to perform is less than 2px\n                // This we consider a small movement which some browser may not perform when\n                // changing the scrollTop/scrollLeft property\n                // Thus in this cases we do not stop the scroll animation, although setting the\n                // scrollTop/scrollLeft value \"fails\"\n                var isSmallMovement = scrollDistance < PageScrollConfig._minScrollDistance;\n                if (!_this.verticalScrolling) {\n                    scrollingView.scrollLeft = position;\n                }\n                else {\n                    scrollingView.scrollTop = position;\n                }\n                // Return true of setting the new scrollTop/scrollLeft value worked\n                // We consider that it worked if the new scrollTop/scrollLeft value is closer to the\n                // desired scrollTop/scrollLeft than before (it might not be exactly the value we\n                // set due to dpi or rounding irregularities)\n                if (isSmallMovement || scrollDistance > Math.abs(_this.getScrollPropertyValue(scrollingView) - position)) {\n                    return true;\n                }\n            }\n            return oneAlreadyWorked;\n        }, false);\n    };\n    /**\n     * Trigger firing a animation finish event\n     * @param value Whether the animation finished at the target (true) or got interrupted (false)\n     */\n    PageScrollInstance.prototype.fireEvent = function (value) {\n        if (this._pageScrollFinish) {\n            this._pageScrollFinish.emit(value);\n        }\n    };\n    /**\n     * Attach the interrupt listeners to the PageScrollInstance body. The given interruptReporter\n     * will be called if any of the attached events is fired.\n     *\n     * Possibly attached interruptListeners are automatically removed from the body before the new one will be attached.\n     *\n     * @param interruptReporter\n     */\n    PageScrollInstance.prototype.attachInterruptListeners = function (interruptReporter) {\n        var _this = this;\n        if (this._interruptListenersAttached) {\n            // Detach possibly existing listeners first\n            this.detachInterruptListeners();\n        }\n        this._interruptListener = function (event) {\n            interruptReporter.report(event, _this);\n        };\n        PageScrollConfig._interruptEvents.forEach(function (event) { return _this.document.body.addEventListener(event, _this._interruptListener); });\n        this._interruptListenersAttached = true;\n    };\n    /**\n     * Remove event listeners from the body and stop listening for events that might be treated as \"animation\n     * interrupt\" events.\n     */\n    PageScrollInstance.prototype.detachInterruptListeners = function () {\n        var _this = this;\n        PageScrollConfig._interruptEvents.forEach(function (event) { return _this.document.body.removeEventListener(event, _this._interruptListener); });\n        this._interruptListenersAttached = false;\n    };\n    Object.defineProperty(PageScrollInstance.prototype, \"namespace\", {\n        get: function () {\n            return this._namespace;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PageScrollInstance.prototype, \"scrollTarget\", {\n        get: function () {\n            return this._scrollTarget;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PageScrollInstance.prototype, \"verticalScrolling\", {\n        get: function () {\n            return this._verticalScrolling;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PageScrollInstance.prototype, \"scrollingViews\", {\n        get: function () {\n            return this._scrollingViews;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PageScrollInstance.prototype, \"startScrollPosition\", {\n        get: function () {\n            return this._startScrollPosition;\n        },\n        set: function (value) {\n            this._startScrollPosition = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PageScrollInstance.prototype, \"targetScrollPosition\", {\n        get: function () {\n            return this._targetScrollPosition;\n        },\n        set: function (value) {\n            this._targetScrollPosition = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PageScrollInstance.prototype, \"distanceToScroll\", {\n        get: function () {\n            return this._distanceToScroll;\n        },\n        set: function (value) {\n            this._distanceToScroll = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PageScrollInstance.prototype, \"executionDuration\", {\n        get: function () {\n            return this._executionDuration;\n        },\n        set: function (value) {\n            this._executionDuration = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PageScrollInstance.prototype, \"duration\", {\n        get: function () {\n            return this._duration;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PageScrollInstance.prototype, \"speed\", {\n        get: function () {\n            return this._speed;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PageScrollInstance.prototype, \"easingLogic\", {\n        get: function () {\n            return this._easingLogic;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PageScrollInstance.prototype, \"interruptible\", {\n        get: function () {\n            return this._interruptible;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PageScrollInstance.prototype, \"startTime\", {\n        get: function () {\n            return this._startTime;\n        },\n        set: function (value) {\n            this._startTime = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PageScrollInstance.prototype, \"endTime\", {\n        get: function () {\n            return this._endTime;\n        },\n        set: function (value) {\n            this._endTime = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PageScrollInstance.prototype, \"timer\", {\n        get: function () {\n            return this._timer;\n        },\n        set: function (value) {\n            this._timer = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PageScrollInstance.prototype, \"interruptListenersAttached\", {\n        get: function () {\n            return this._interruptListenersAttached;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PageScrollInstance;\n}());\n\nvar PageScroll = (function () {\n    function PageScroll(pageScrollService, router, document) {\n        this.pageScrollService = pageScrollService;\n        this.router = router;\n        this.pageScrollHorizontal = null;\n        this.pageScrollOffset = null;\n        this.pageScrollDuration = null;\n        this.pageScrollSpeed = null;\n        this.pageScrollEasing = null;\n        this.pageScrollAdjustHash = false;\n        this.pageScroll = null;\n        this.pageScrollFinish = new _angular_core.EventEmitter();\n        this.document = document;\n    }\n    PageScroll.prototype.ngOnChanges = function (changes) {\n        // Some inputs changed, reset the pageScrollInstance\n        this.pageScrollInstance = undefined;\n    };\n    PageScroll.prototype.ngOnDestroy = function () {\n        if (this.pageScrollInstance) {\n            this.pageScrollService.stop(this.pageScrollInstance);\n        }\n        return undefined;\n    };\n    PageScroll.prototype.generatePageScrollInstance = function () {\n        if (PageScrollUtilService.isUndefinedOrNull(this.pageScrollInstance)) {\n            this.pageScrollInstance = PageScrollInstance.newInstance({\n                document: this.document,\n                scrollTarget: this.href,\n                scrollingViews: null,\n                namespace: this.pageScroll,\n                verticalScrolling: !this.pageScrollHorizontal,\n                pageScrollOffset: this.pageScrollOffset,\n                pageScrollInterruptible: this.pageScrollInterruptible,\n                pageScrollEasingLogic: this.pageScrollEasing,\n                pageScrollDuration: this.pageScrollDuration,\n                pageScrollSpeed: this.pageScrollSpeed,\n                pageScrollFinishListener: this.pageScrollFinish\n            });\n        }\n        return this.pageScrollInstance;\n    };\n    PageScroll.prototype.pushRouterState = function () {\n        if (this.pageScrollAdjustHash && typeof this.pageScrollInstance.scrollTarget === 'string'\n            && this.pageScrollInstance.scrollTarget.substr(0, 1) === '#') {\n            // \"Navigate\" to the current route again and this time set the fragment/hash\n            this.router.navigate([], {\n                fragment: this.pageScrollInstance.scrollTarget.substr(1),\n                preserveQueryParams: true\n            });\n        }\n    };\n    PageScroll.prototype.scroll = function () {\n        var pageScrollInstance = this.generatePageScrollInstance();\n        this.pushRouterState();\n        this.pageScrollService.start(pageScrollInstance);\n    };\n    PageScroll.prototype.handleClick = function (clickEvent) {\n        var _this = this;\n        if (this.routerLink && this.router !== null && this.router !== undefined) {\n            var urlTree = void 0;\n            if (typeof this.routerLink === 'string') {\n                urlTree = this.router.parseUrl(this.routerLink);\n            }\n            else {\n                urlTree = this.router.createUrlTree(this.routerLink);\n            }\n            if (!this.router.isActive(urlTree, true)) {\n                // We need to navigate their first.\n                // Navigation is handled by the routerLink directive\n                // so we only need to listen for route change\n                var subscription_1 = this.router.events.subscribe(function (routerEvent) {\n                    if (routerEvent instanceof _angular_router.NavigationEnd) {\n                        subscription_1.unsubscribe();\n                        _this.scroll();\n                    }\n                    else if (routerEvent instanceof _angular_router.NavigationError || routerEvent instanceof _angular_router.NavigationCancel) {\n                        subscription_1.unsubscribe();\n                    }\n                });\n                return false; // to preventDefault()\n            }\n        }\n        this.scroll();\n        return false; // to preventDefault()\n    };\n    return PageScroll;\n}());\nPageScroll.decorators = [\n    { type: _angular_core.Directive, args: [{\n                selector: '[pageScroll]',\n                host: {\n                    '(click)': 'handleClick($event)',\n                }\n            },] },\n];\n/** @nocollapse */\nPageScroll.ctorParameters = function () { return [\n    { type: PageScrollService, },\n    { type: _angular_router.Router, decorators: [{ type: _angular_core.Optional },] },\n    { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_platformBrowser.DOCUMENT,] },] },\n]; };\nPageScroll.propDecorators = {\n    'routerLink': [{ type: _angular_core.Input },],\n    'href': [{ type: _angular_core.Input },],\n    'pageScrollHorizontal': [{ type: _angular_core.Input },],\n    'pageScrollOffset': [{ type: _angular_core.Input },],\n    'pageScrollDuration': [{ type: _angular_core.Input },],\n    'pageScrollSpeed': [{ type: _angular_core.Input },],\n    'pageScrollEasing': [{ type: _angular_core.Input },],\n    'pageScrollInterruptible': [{ type: _angular_core.Input },],\n    'pageScrollAdjustHash': [{ type: _angular_core.Input },],\n    'pageScroll': [{ type: _angular_core.Input },],\n    'pageScrollFinish': [{ type: _angular_core.Output },],\n};\n\n/**\n * Created by sebastianfuss on 03.09.16.\n */\nvar Ng2PageScrollModule = (function () {\n    function Ng2PageScrollModule() {\n    }\n    Ng2PageScrollModule.forRoot = function () {\n        return {\n            ngModule: Ng2PageScrollModule,\n            providers: [\n                { provide: PageScrollService, useClass: PageScrollService }\n            ]\n        };\n    };\n    return Ng2PageScrollModule;\n}());\nNg2PageScrollModule.decorators = [\n    { type: _angular_core.NgModule, args: [{\n                imports: [_angular_common.CommonModule],\n                declarations: [PageScroll],\n                exports: [PageScroll]\n            },] },\n];\n/** @nocollapse */\nNg2PageScrollModule.ctorParameters = function () { return []; };\n\nexports.Ng2PageScrollModule = Ng2PageScrollModule;\nexports.PageScroll = PageScroll;\nexports.PageScrollService = PageScrollService;\nexports.EasingLogic = EasingLogic;\nexports.PageScrollConfig = PageScrollConfig;\nexports.PageScrollInstance = PageScrollInstance;\nexports.PageScrollUtilService = PageScrollUtilService;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","/home/travis/build/npmtest/node-npmtest-ng2-page-scroll/node_modules/ng2-page-scroll/ng2-page-scroll.js":"export * from './src/ng2-page-scroll.directive';\nexport * from './src/ng2-page-scroll.service';\nexport * from './src/ng2-page-scroll-config';\nexport * from './src/ng2-page-scroll-instance';\nexport * from './src/ng2-page-scroll-util.service';\nexport { Ng2PageScrollModule } from './src/ng2-page-scroll.module';\n","/home/travis/build/npmtest/node-npmtest-ng2-page-scroll/node_modules/ng2-page-scroll/src/ng2-page-scroll-config.js":"var EasingLogic = (function () {\n    function EasingLogic() {\n    }\n    return EasingLogic;\n}());\nexport { EasingLogic };\nvar PageScrollConfig = (function () {\n    function PageScrollConfig() {\n    }\n    Object.defineProperty(PageScrollConfig, \"defaultEasingLogic\", {\n        // Getter and setter to avoid auto completion to suggest calling the method\n        get: function () {\n            return PageScrollConfig._easingLogic;\n        },\n        set: function (easingLogic) {\n            PageScrollConfig._easingLogic = easingLogic;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PageScrollConfig;\n}());\nexport { PageScrollConfig };\n/**\n * The number of milliseconds to wait till updating the scroll position again.\n * Small amounts may produce smoother animations but require more processing power.\n * @type {number}\n * @private\n */\nPageScrollConfig._interval = 10;\n/**\n * The amount of pixels that need to be between the current scrollTop/scrollLeft position\n * and the target position the cause a scroll animation. In case distance is below\n * this threshold, an immediate jump will be performed.\n * Due to dpi or rounding irregularities in browsers floating point numbers for scrollTop/scrollLeft values\n * are possible, making a === comparison of current scrollTop or scrollLeft and target scrollPosition error-prone.\n * @type {number}\n * @private\n */\nPageScrollConfig._minScrollDistance = 2;\n/**\n * Name of the default namespace.\n * @type {string}\n * @private\n */\nPageScrollConfig._defaultNamespace = 'default';\n/**\n * Whether by default the scrolling should happen in vertical direction (by manipulating the scrollTop property)\n * (= true; default) or in horizontal direction (by manipulating the scrollLeft property) (= false\n * @type {boolean}\n */\nPageScrollConfig.defaultIsVerticalScrolling = true;\n/**\n * How many console logs should be emitted.\n * 0: None\n * 2: If animation could not be started due to missing target, \"already at destination\" or similar reasons\n * 5: All scroll position values that get set\n * @type {boolean}\n * @private\n */\nPageScrollConfig._logLevel = 2;\n/**\n * The duration how long a scrollTo animation should last by default.\n * May be overridden using the page-scroll-duration attribute on a single ng2PageScroll instance.\n * @type {number}\n */\nPageScrollConfig.defaultDuration = 1250;\n/**\n * The distance in pixels above scroll target where the animation should stop. Setting a positive number results in\n * the scroll target being more in the middle of the screen, negative numbers will produce scrolling \"too far\"\n * @type {number}\n */\nPageScrollConfig.defaultScrollOffset = 0;\n/**\n * Whether by default for inline scroll animations the advanced offset calculation should take place (true) or\n * not (false). Default is false.\n * The advanced offset calculation will traverse the DOM tree upwards, starting at the scrollTarget, until it finds\n * the scrollingView container element. Along the way the offset positions of the relative positioned\n * (position: relative) elements will be taken into account for calculating the target elements position.\n * @type {boolean}\n */\nPageScrollConfig.defaultAdvancedInlineOffsetCalculation = false;\n/**\n * The events that are listened to on the body to decide whether a scroll animation has been interfered/interrupted by the user\n * @type {string[]}\n * @private\n */\nPageScrollConfig._interruptEvents = ['mousedown', 'wheel', 'DOMMouseScroll', 'mousewheel', 'keyup', 'touchmove'];\n/**\n * The keys that are considered to interrupt a scroll animation (mainly the arrow keys). All other key presses will not stop the\n * scroll animation.\n * @type {number[]}\n * @private\n */\nPageScrollConfig._interruptKeys = [33, 34, 35, 36, 38, 40];\n/**\n * Whether a scroll animation should be interruptible by user interaction (true) or not (false). If the user performs an\n * interrupting event while a scroll animation takes place, the scroll animation stops.\n * @type {boolean}\n */\nPageScrollConfig.defaultInterruptible = true;\nPageScrollConfig._easingLogic = {\n    ease: function (t, b, c, d) {\n        // Linear easing\n        return c * t / d + b;\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-ng2-page-scroll/node_modules/ng2-page-scroll/src/ng2-page-scroll.directive.js":"import { Directive, Input, Output, EventEmitter, Inject, Optional } from '@angular/core';\nimport { Router, NavigationEnd, NavigationError, NavigationCancel } from '@angular/router';\nimport { DOCUMENT } from '@angular/platform-browser';\nimport { PageScrollService } from './ng2-page-scroll.service';\nimport { PageScrollInstance } from './ng2-page-scroll-instance';\nimport { PageScrollUtilService as Util } from './ng2-page-scroll-util.service';\nvar PageScroll = (function () {\n    function PageScroll(pageScrollService, router, document) {\n        this.pageScrollService = pageScrollService;\n        this.router = router;\n        this.pageScrollHorizontal = null;\n        this.pageScrollOffset = null;\n        this.pageScrollDuration = null;\n        this.pageScrollSpeed = null;\n        this.pageScrollEasing = null;\n        this.pageScrollAdjustHash = false;\n        this.pageScroll = null;\n        this.pageScrollFinish = new EventEmitter();\n        this.document = document;\n    }\n    PageScroll.prototype.ngOnChanges = function (changes) {\n        // Some inputs changed, reset the pageScrollInstance\n        this.pageScrollInstance = undefined;\n    };\n    PageScroll.prototype.ngOnDestroy = function () {\n        if (this.pageScrollInstance) {\n            this.pageScrollService.stop(this.pageScrollInstance);\n        }\n        return undefined;\n    };\n    PageScroll.prototype.generatePageScrollInstance = function () {\n        if (Util.isUndefinedOrNull(this.pageScrollInstance)) {\n            this.pageScrollInstance = PageScrollInstance.newInstance({\n                document: this.document,\n                scrollTarget: this.href,\n                scrollingViews: null,\n                namespace: this.pageScroll,\n                verticalScrolling: !this.pageScrollHorizontal,\n                pageScrollOffset: this.pageScrollOffset,\n                pageScrollInterruptible: this.pageScrollInterruptible,\n                pageScrollEasingLogic: this.pageScrollEasing,\n                pageScrollDuration: this.pageScrollDuration,\n                pageScrollSpeed: this.pageScrollSpeed,\n                pageScrollFinishListener: this.pageScrollFinish\n            });\n        }\n        return this.pageScrollInstance;\n    };\n    PageScroll.prototype.pushRouterState = function () {\n        if (this.pageScrollAdjustHash && typeof this.pageScrollInstance.scrollTarget === 'string'\n            && this.pageScrollInstance.scrollTarget.substr(0, 1) === '#') {\n            // \"Navigate\" to the current route again and this time set the fragment/hash\n            this.router.navigate([], {\n                fragment: this.pageScrollInstance.scrollTarget.substr(1),\n                preserveQueryParams: true\n            });\n        }\n    };\n    PageScroll.prototype.scroll = function () {\n        var pageScrollInstance = this.generatePageScrollInstance();\n        this.pushRouterState();\n        this.pageScrollService.start(pageScrollInstance);\n    };\n    PageScroll.prototype.handleClick = function (clickEvent) {\n        var _this = this;\n        if (this.routerLink && this.router !== null && this.router !== undefined) {\n            var urlTree = void 0;\n            if (typeof this.routerLink === 'string') {\n                urlTree = this.router.parseUrl(this.routerLink);\n            }\n            else {\n                urlTree = this.router.createUrlTree(this.routerLink);\n            }\n            if (!this.router.isActive(urlTree, true)) {\n                // We need to navigate their first.\n                // Navigation is handled by the routerLink directive\n                // so we only need to listen for route change\n                var subscription_1 = this.router.events.subscribe(function (routerEvent) {\n                    if (routerEvent instanceof NavigationEnd) {\n                        subscription_1.unsubscribe();\n                        _this.scroll();\n                    }\n                    else if (routerEvent instanceof NavigationError || routerEvent instanceof NavigationCancel) {\n                        subscription_1.unsubscribe();\n                    }\n                });\n                return false; // to preventDefault()\n            }\n        }\n        this.scroll();\n        return false; // to preventDefault()\n    };\n    return PageScroll;\n}());\nexport { PageScroll };\nPageScroll.decorators = [\n    { type: Directive, args: [{\n                selector: '[pageScroll]',\n                host: {\n                    '(click)': 'handleClick($event)',\n                }\n            },] },\n];\n/** @nocollapse */\nPageScroll.ctorParameters = function () { return [\n    { type: PageScrollService, },\n    { type: Router, decorators: [{ type: Optional },] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },\n]; };\nPageScroll.propDecorators = {\n    'routerLink': [{ type: Input },],\n    'href': [{ type: Input },],\n    'pageScrollHorizontal': [{ type: Input },],\n    'pageScrollOffset': [{ type: Input },],\n    'pageScrollDuration': [{ type: Input },],\n    'pageScrollSpeed': [{ type: Input },],\n    'pageScrollEasing': [{ type: Input },],\n    'pageScrollInterruptible': [{ type: Input },],\n    'pageScrollAdjustHash': [{ type: Input },],\n    'pageScroll': [{ type: Input },],\n    'pageScrollFinish': [{ type: Output },],\n};\n","/home/travis/build/npmtest/node-npmtest-ng2-page-scroll/node_modules/ng2-page-scroll/src/ng2-page-scroll-instance.js":"/**\n * Created by sebastianfuss on 29.08.16.\n */\nimport { EventEmitter } from '@angular/core';\nimport { PageScrollConfig } from './ng2-page-scroll-config';\nimport { PageScrollUtilService as Util } from './ng2-page-scroll-util.service';\n/**\n * Represents a scrolling action\n */\nvar PageScrollInstance = (function () {\n    /**\n     * Private constructor, requires the properties assumed to be the bare minimum.\n     * Use the factory methods to create instances:\n     *      {@link PageScrollInstance#simpleInstance}\n     *      {@link PageScrollInstance#newInstance}\n     * @param namespace\n     * @param document\n     */\n    function PageScrollInstance(namespace, document) {\n        /**\n         * These properties will be set during instance construction and default to their defaults from PageScrollConfig\n         */\n        /* A namespace to \"group\" scroll animations together and stopping some does not stop others */\n        this._namespace = PageScrollConfig._defaultNamespace;\n        /* Whether we scroll vertically (true) or horizontally (false) */\n        this._verticalScrolling = PageScrollConfig.defaultIsVerticalScrolling;\n        /* Offset in px that the animation should stop above that target element */\n        this._offset = PageScrollConfig.defaultScrollOffset;\n        /* Duration in milliseconds the scroll animation should last */\n        this._duration = PageScrollConfig.defaultDuration;\n        /* Easing function to manipulate the scrollTop/scrollLeft value over time */\n        this._easingLogic = PageScrollConfig.defaultEasingLogic;\n        /* Boolean whether the scroll animation should stop on user interruption or not */\n        this._interruptible = PageScrollConfig.defaultInterruptible;\n        /* Whether the advanded offset calculation for inline scrolling should be used */\n        this._advancedInlineOffsetCalculation = PageScrollConfig.defaultAdvancedInlineOffsetCalculation;\n        /* Event emitter to notify the world about the scrolling */\n        this._pageScrollFinish = new EventEmitter();\n        /**\n         * These properties will be set/manipulated if the scroll animation starts\n         */\n        /* The initial value of the scrollTop or scrollLeft position when the animation starts */\n        this._startScrollPosition = 0;\n        /* Whether an interrupt listener is attached to the body or not */\n        this._interruptListenersAttached = false;\n        /* References to the timer instance that is used to perform the scroll animation to be\n         able to clear it on animation end*/\n        this._timer = null;\n        this._namespace = namespace;\n        this.document = document;\n    }\n    /*\n     * Factory methods for instance creation\n     */\n    PageScrollInstance.simpleInstance = function (document, scrollTarget, namespace) {\n        return PageScrollInstance.newInstance({\n            document: document,\n            scrollTarget: scrollTarget,\n            namespace: namespace\n        });\n    };\n    PageScrollInstance.newInstance = function (options) {\n        if (Util.isUndefinedOrNull(options.namespace) || options.namespace.length <= 0) {\n            options.namespace = PageScrollConfig._defaultNamespace;\n        }\n        var pageScrollInstance = new PageScrollInstance(options.namespace, document);\n        if (Util.isUndefinedOrNull(options.scrollingViews) || options.scrollingViews.length === 0) {\n            pageScrollInstance._isInlineScrolling = false;\n            pageScrollInstance._scrollingViews = [document.documentElement, document.body, document.body.parentNode];\n        }\n        else {\n            pageScrollInstance._isInlineScrolling = true;\n            pageScrollInstance._scrollingViews = options.scrollingViews;\n        }\n        pageScrollInstance._scrollTarget = options.scrollTarget;\n        if (!Util.isUndefinedOrNull(options.verticalScrolling)) {\n            pageScrollInstance._verticalScrolling = options.verticalScrolling;\n        }\n        if (!Util.isUndefinedOrNull(options.pageScrollOffset)) {\n            pageScrollInstance._offset = options.pageScrollOffset;\n        }\n        if (!Util.isUndefinedOrNull(options.pageScrollEasingLogic)) {\n            pageScrollInstance._easingLogic = options.pageScrollEasingLogic;\n        }\n        if (Util.isUndefinedOrNull(options.pageScrollDuration) && !Util.isUndefinedOrNull(options.pageScrollSpeed)) {\n            // No duration specified in the options, only in this case we use the speed option when present\n            pageScrollInstance._speed = options.pageScrollSpeed;\n            pageScrollInstance._duration = undefined;\n        }\n        else if (!Util.isUndefinedOrNull(options.pageScrollDuration)) {\n            pageScrollInstance._duration = options.pageScrollDuration;\n        }\n        if (!Util.isUndefinedOrNull(options.pageScrollFinishListener)) {\n            pageScrollInstance._pageScrollFinish = options.pageScrollFinishListener;\n        }\n        pageScrollInstance._interruptible = options.pageScrollInterruptible ||\n            (Util.isUndefinedOrNull(options.pageScrollInterruptible) && PageScrollConfig.defaultInterruptible);\n        pageScrollInstance._advancedInlineOffsetCalculation = options.advancedInlineOffsetCalculation ||\n            (Util.isUndefinedOrNull(options.advancedInlineOffsetCalculation) &&\n                PageScrollConfig.defaultAdvancedInlineOffsetCalculation);\n        return pageScrollInstance;\n    };\n    /**\n     * Create a PageScrollInstance representing a scroll animation on the documents body.\n     *\n     * @param document The document that contains the body to be scrolled and the scrollTarget elements\n     * @param scrollTarget Where to scroll to. Can be a HTMLElement reference or a string like '#elementId'\n     * @param verticalScrolling\n     * @param namespace Optional namespace to group scroll animations logically\n     * @returns {PageScrollInstance}\n     *\n     * @deprecated Use {@link newInstance(options: PageScrollOptions)}\n     **/\n    PageScrollInstance.simpleDirectionInstance = function (document, scrollTarget, verticalScrolling, namespace) {\n        return PageScrollInstance.newInstance({\n            document: document,\n            scrollTarget: scrollTarget,\n            namespace: namespace,\n            verticalScrolling: verticalScrolling,\n        });\n    };\n    /**\n     * Create a PageScrollInstance representing a scroll animation to the target element where the scrollingView\n     * elements get scrolled (like a div container with fixed height, resulting in scrollbars in it).\n     *\n     * Make sure that the scrollTarget is located inside the scrollingView in the DOM hierarchy, otherwise the\n     * scrollingView will be scrolled to an apparently arbitrary position.\n     *\n     * @param document The document that contains the body to be scrolled and the scrollTarget elements\n     * @param scrollTarget Where to scroll to. Can be a HTMLElement reference or a string like '#elementId'\n     * @param scrollingView The element that should be scrolled\n     * @param namespace Optional namespace to group scroll animations logically\n     * @returns {PageScrollInstance}\n     *\n     * @deprecated Use {@link newInstance(options: PageScrollOptions)}\n     */\n    PageScrollInstance.simpleInlineInstance = function (document, scrollTarget, scrollingView, namespace) {\n        return PageScrollInstance.newInstance({\n            document: document,\n            scrollTarget: scrollTarget,\n            scrollingViews: [scrollingView],\n            verticalScrolling: true,\n            namespace: namespace\n        });\n    };\n    /**\n     *\n     * @param document The document that contains the body to be scrolled and the scrollTarget elements\n     * @param scrollTarget Where to scroll to. Can be a HTMLElement reference or a string like '#elementId'\n     * @param scrollingView The element that should be scrolled\n     * @param verticalScrolling whether the scrolling should be performed in vertical direction (true, default) or horizontal (false)\n     * @param namespace Optional namespace to group scroll animations logically\n     * @returns {PageScrollInstance}\n     *\n     * @deprecated Use {@link newInstance(options: PageScrollOptions)}\n     */\n    PageScrollInstance.simpleInlineDirectionInstance = function (document, scrollTarget, scrollingView, verticalScrolling, namespace) {\n        return PageScrollInstance.newInstance({\n            document: document,\n            scrollTarget: scrollTarget,\n            scrollingViews: [scrollingView],\n            namespace: namespace,\n            verticalScrolling: verticalScrolling,\n        });\n    };\n    /**\n     *\n     * @param document The document that contains the body to be scrolled and the scrollTarget elements\n     * @param scrollTarget Where to scroll to. Can be a HTMLElement reference or a string like '#elementId'\n     * @param scrollingViews The elements that should be scrolled. Null to use the default elements of document and body.\n     * @param namespace Optional namespace to group scroll animations logically\n     * @param verticalScrolling whether the scrolling should be performed in vertical direction (true, default) or horizontal (false)\n     * @param pageScrollOffset The offset to be attached to the top of the target element or\n     *                          null/undefined to use application default\n     * @param pageScrollInterruptible Whether this scroll animation should be interruptible.\n     *                                 Null/undefined for application default\n     * @param pageScrollEasingLogic Easing function to be used for manipulating the scroll position\n     *                          over time. Null/undefined for application default\n     * @param pageScrollDuration The duration in milliseconds the animation should last.\n     *                            Null/undefined for application default\n     * @param pageScrollFinishListener Listener to be called to notify other parts of the application\n     *                                  that the scroll animation has finished\n     * @returns {PageScrollInstance}\n     *\n     * @deprecated Use {@link newInstance(options: PageScrollOptions)}\n     */\n    PageScrollInstance.advancedInstance = function (document, scrollTarget, scrollingViews, namespace, verticalScrolling, pageScrollOffset, pageScrollInterruptible, pageScrollEasingLogic, pageScrollDuration, pageScrollFinishListener) {\n        return PageScrollInstance.newInstance({\n            document: document,\n            scrollTarget: scrollTarget,\n            scrollingViews: scrollingViews,\n            namespace: namespace,\n            verticalScrolling: verticalScrolling,\n            pageScrollOffset: pageScrollOffset,\n            pageScrollInterruptible: pageScrollInterruptible,\n            pageScrollEasingLogic: pageScrollEasingLogic,\n            pageScrollDuration: pageScrollDuration,\n            pageScrollFinishListener: pageScrollFinishListener\n        });\n    };\n    PageScrollInstance.prototype.getScrollPropertyValue = function (scrollingView) {\n        if (!this.verticalScrolling) {\n            return scrollingView.scrollLeft;\n        }\n        return scrollingView.scrollTop;\n    };\n    /**\n     * Extract the exact location of the scrollTarget element.\n     *\n     * Extract the scrollTarget HTMLElement from the given PageScrollTarget object. The latter one may be\n     * a string like \"#heading2\", then this method returns the corresponding DOM element for that id.\n     *\n     * @returns {HTMLElement}\n     */\n    PageScrollInstance.prototype.extractScrollTargetPosition = function () {\n        var scrollTargetElement;\n        if (typeof this._scrollTarget === 'string') {\n            scrollTargetElement = this.document.getElementById(this._scrollTarget.substr(1));\n        }\n        else {\n            scrollTargetElement = this._scrollTarget;\n        }\n        if (scrollTargetElement === null || scrollTargetElement === undefined) {\n            // Scroll target not found\n            return { top: NaN, left: NaN };\n        }\n        if (this._isInlineScrolling) {\n            var position = { top: scrollTargetElement.offsetTop, left: scrollTargetElement.offsetLeft };\n            if (this._advancedInlineOffsetCalculation && this.scrollingViews.length === 1) {\n                var accumulatedParentsPos = { top: 0, left: 0 };\n                // not named window to make sure we're not getting the global window variable by accident\n                var theWindow = scrollTargetElement.ownerDocument.defaultView;\n                var parentFound = false;\n                // Start parent is the immediate parent\n                var parent_1 = scrollTargetElement.parentElement;\n                // Iterate upwards all parents\n                while (!parentFound && !Util.isUndefinedOrNull(parent_1)) {\n                    if (theWindow.getComputedStyle(parent_1).getPropertyValue('position') === 'relative') {\n                        accumulatedParentsPos.top += parent_1.offsetTop;\n                        accumulatedParentsPos.left += parent_1.offsetLeft;\n                    }\n                    // Next iteration\n                    parent_1 = parent_1.parentElement;\n                    parentFound = parent_1 === this.scrollingViews[0];\n                }\n                if (parentFound) {\n                    // Only use the results if we found the parent, otherwise we accumulated too much anyway\n                    position.top += accumulatedParentsPos.top;\n                    position.left += accumulatedParentsPos.left;\n                }\n                else {\n                    if (PageScrollConfig._logLevel >= 2) {\n                        console.warn('Unable to find nested scrolling targets parent!');\n                    }\n                }\n            }\n            return position;\n        }\n        return Util.extractElementPosition(this.document, scrollTargetElement);\n    };\n    /**\n     * Get the top offset of the scroll animation.\n     * This automatically takes the offset location of the scrolling container/scrolling view\n     * into account (for nested/inline scrolling).\n     *\n     * @returns {number}\n     */\n    PageScrollInstance.prototype.getCurrentOffset = function () {\n        return this._offset;\n    };\n    /**\n     * Sets the \"scrollTop\" or \"scrollLeft\" property for all scrollingViews to the provided value\n     * @param position\n     * @return true if at least for one ScrollTopSource the scrollTop/scrollLeft value could be set and it kept the new value.\n     *          false if it failed for all ScrollingViews, meaning that we should stop the animation\n     *          (probably because we're at the end of the scrolling region)\n     */\n    PageScrollInstance.prototype.setScrollPosition = function (position) {\n        var _this = this;\n        if (PageScrollConfig._logLevel >= 5) {\n            console.warn('Scroll Position: ' + position);\n        }\n        // Set the new scrollTop/scrollLeft to all scrollingViews elements\n        return this.scrollingViews.reduce(function (oneAlreadyWorked, scrollingView) {\n            var startScrollPropertyValue = _this.getScrollPropertyValue(scrollingView);\n            if (scrollingView && !Util.isUndefinedOrNull(startScrollPropertyValue)) {\n                var scrollDistance = Math.abs(startScrollPropertyValue - position);\n                // The movement we need to perform is less than 2px\n                // This we consider a small movement which some browser may not perform when\n                // changing the scrollTop/scrollLeft property\n                // Thus in this cases we do not stop the scroll animation, although setting the\n                // scrollTop/scrollLeft value \"fails\"\n                var isSmallMovement = scrollDistance < PageScrollConfig._minScrollDistance;\n                if (!_this.verticalScrolling) {\n                    scrollingView.scrollLeft = position;\n                }\n                else {\n                    scrollingView.scrollTop = position;\n                }\n                // Return true of setting the new scrollTop/scrollLeft value worked\n                // We consider that it worked if the new scrollTop/scrollLeft value is closer to the\n                // desired scrollTop/scrollLeft than before (it might not be exactly the value we\n                // set due to dpi or rounding irregularities)\n                if (isSmallMovement || scrollDistance > Math.abs(_this.getScrollPropertyValue(scrollingView) - position)) {\n                    return true;\n                }\n            }\n            return oneAlreadyWorked;\n        }, false);\n    };\n    /**\n     * Trigger firing a animation finish event\n     * @param value Whether the animation finished at the target (true) or got interrupted (false)\n     */\n    PageScrollInstance.prototype.fireEvent = function (value) {\n        if (this._pageScrollFinish) {\n            this._pageScrollFinish.emit(value);\n        }\n    };\n    /**\n     * Attach the interrupt listeners to the PageScrollInstance body. The given interruptReporter\n     * will be called if any of the attached events is fired.\n     *\n     * Possibly attached interruptListeners are automatically removed from the body before the new one will be attached.\n     *\n     * @param interruptReporter\n     */\n    PageScrollInstance.prototype.attachInterruptListeners = function (interruptReporter) {\n        var _this = this;\n        if (this._interruptListenersAttached) {\n            // Detach possibly existing listeners first\n            this.detachInterruptListeners();\n        }\n        this._interruptListener = function (event) {\n            interruptReporter.report(event, _this);\n        };\n        PageScrollConfig._interruptEvents.forEach(function (event) { return _this.document.body.addEventListener(event, _this._interruptListener); });\n        this._interruptListenersAttached = true;\n    };\n    /**\n     * Remove event listeners from the body and stop listening for events that might be treated as \"animation\n     * interrupt\" events.\n     */\n    PageScrollInstance.prototype.detachInterruptListeners = function () {\n        var _this = this;\n        PageScrollConfig._interruptEvents.forEach(function (event) { return _this.document.body.removeEventListener(event, _this._interruptListener); });\n        this._interruptListenersAttached = false;\n    };\n    Object.defineProperty(PageScrollInstance.prototype, \"namespace\", {\n        get: function () {\n            return this._namespace;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PageScrollInstance.prototype, \"scrollTarget\", {\n        get: function () {\n            return this._scrollTarget;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PageScrollInstance.prototype, \"verticalScrolling\", {\n        get: function () {\n            return this._verticalScrolling;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PageScrollInstance.prototype, \"scrollingViews\", {\n        get: function () {\n            return this._scrollingViews;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PageScrollInstance.prototype, \"startScrollPosition\", {\n        get: function () {\n            return this._startScrollPosition;\n        },\n        set: function (value) {\n            this._startScrollPosition = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PageScrollInstance.prototype, \"targetScrollPosition\", {\n        get: function () {\n            return this._targetScrollPosition;\n        },\n        set: function (value) {\n            this._targetScrollPosition = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PageScrollInstance.prototype, \"distanceToScroll\", {\n        get: function () {\n            return this._distanceToScroll;\n        },\n        set: function (value) {\n            this._distanceToScroll = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PageScrollInstance.prototype, \"executionDuration\", {\n        get: function () {\n            return this._executionDuration;\n        },\n        set: function (value) {\n            this._executionDuration = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PageScrollInstance.prototype, \"duration\", {\n        get: function () {\n            return this._duration;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PageScrollInstance.prototype, \"speed\", {\n        get: function () {\n            return this._speed;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PageScrollInstance.prototype, \"easingLogic\", {\n        get: function () {\n            return this._easingLogic;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PageScrollInstance.prototype, \"interruptible\", {\n        get: function () {\n            return this._interruptible;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PageScrollInstance.prototype, \"startTime\", {\n        get: function () {\n            return this._startTime;\n        },\n        set: function (value) {\n            this._startTime = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PageScrollInstance.prototype, \"endTime\", {\n        get: function () {\n            return this._endTime;\n        },\n        set: function (value) {\n            this._endTime = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PageScrollInstance.prototype, \"timer\", {\n        get: function () {\n            return this._timer;\n        },\n        set: function (value) {\n            this._timer = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PageScrollInstance.prototype, \"interruptListenersAttached\", {\n        get: function () {\n            return this._interruptListenersAttached;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PageScrollInstance;\n}());\nexport { PageScrollInstance };\n","/home/travis/build/npmtest/node-npmtest-ng2-page-scroll/node_modules/ng2-page-scroll/src/ng2-page-scroll.module.js":"/**\n * Created by sebastianfuss on 03.09.16.\n */\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageScrollService } from './ng2-page-scroll.service';\nimport { PageScroll } from './ng2-page-scroll.directive';\nvar Ng2PageScrollModule = (function () {\n    function Ng2PageScrollModule() {\n    }\n    Ng2PageScrollModule.forRoot = function () {\n        return {\n            ngModule: Ng2PageScrollModule,\n            providers: [\n                { provide: PageScrollService, useClass: PageScrollService }\n            ]\n        };\n    };\n    return Ng2PageScrollModule;\n}());\nexport { Ng2PageScrollModule };\nNg2PageScrollModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule],\n                declarations: [PageScroll],\n                exports: [PageScroll]\n            },] },\n];\n/** @nocollapse */\nNg2PageScrollModule.ctorParameters = function () { return []; };\n","/home/travis/build/npmtest/node-npmtest-ng2-page-scroll/node_modules/ng2-page-scroll/src/ng2-page-scroll.service.js":"import { Injectable, isDevMode } from '@angular/core';\nimport { PageScrollConfig } from './ng2-page-scroll-config';\nimport { PageScrollUtilService as Util } from './ng2-page-scroll-util.service';\nvar PageScrollService = (function () {\n    function PageScrollService() {\n        var _this = this;\n        this.runningInstances = [];\n        this.onInterrupted = {\n            report: function (event, pageScrollInstance) {\n                if (!pageScrollInstance.interruptible) {\n                    // Non-interruptible anyway, so do not stop anything\n                    return;\n                }\n                var shouldStop = true;\n                if (event.type === 'keyup') {\n                    // Only stop if specific keys have been pressed, for all others don't stop anything\n                    if (PageScrollConfig._interruptKeys.indexOf(event.keyCode) === -1) {\n                        // The pressed key is not in the list of interrupting keys\n                        shouldStop = false;\n                    }\n                }\n                else if (event.type === 'mousedown') {\n                    // For mousedown events we only stop the scroll animation of the mouse has\n                    // been clicked inside the scrolling container\n                    if (!pageScrollInstance.scrollingViews.some(function (scrollingView) { return scrollingView.contains(event.target); })) {\n                        // Mouse clicked an element which is not inside any of the the scrolling containers\n                        shouldStop = false;\n                    }\n                }\n                if (shouldStop) {\n                    _this.stopAll(pageScrollInstance.namespace);\n                }\n            }\n        };\n        if (PageScrollService.instanceCounter > 0 && isDevMode()) {\n            console.warn('An instance of PageScrollService already exists, usually ' +\n                'including one provider should be enough, so double check.');\n        }\n        PageScrollService.instanceCounter++;\n    }\n    PageScrollService.prototype.stopInternal = function (interrupted, pageScrollInstance) {\n        var index = this.runningInstances.indexOf(pageScrollInstance);\n        if (index >= 0) {\n            this.runningInstances.splice(index, 1);\n        }\n        if (pageScrollInstance.interruptListenersAttached) {\n            pageScrollInstance.detachInterruptListeners();\n        }\n        if (pageScrollInstance.timer) {\n            // Clear/Stop the timer\n            clearInterval(pageScrollInstance.timer);\n            // Clear the reference to this timer\n            pageScrollInstance.timer = undefined;\n            pageScrollInstance.fireEvent(!interrupted);\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Start a scroll animation. All properties of the animation are stored in the given {@link PageScrollInstance} object.\n     *\n     * This is the core functionality of the whole library.\n     *\n     * @param pageScrollInstance\n     */\n    PageScrollService.prototype.start = function (pageScrollInstance) {\n        var _this = this;\n        // Stop all possibly running scroll animations in the same namespace\n        this.stopAll(pageScrollInstance.namespace);\n        if (pageScrollInstance.scrollingViews === null || pageScrollInstance.scrollingViews.length === 0) {\n            // No scrollingViews specified, thus we can't animate anything\n            if (isDevMode()) {\n                console.warn('No scrollingViews specified, this ng2-page-scroll does not know which DOM elements to scroll');\n            }\n            return;\n        }\n        var startScrollPositionFound = false;\n        // Reset start scroll position to 0. If any of the scrollingViews has a different one, it will be extracted next\n        pageScrollInstance.startScrollPosition = 0;\n        // Get the start scroll position from the scrollingViews (e.g. if the user already scrolled down the content)\n        pageScrollInstance.scrollingViews.forEach(function (scrollingView) {\n            if (Util.isUndefinedOrNull(scrollingView)) {\n                return;\n            }\n            // Get the scrollTop or scrollLeft value of the first scrollingView that returns a value for its \"scrollTop\"\n            // or \"scrollLeft\" property that is not undefined and unequal to 0\n            var scrollPosition = pageScrollInstance.getScrollPropertyValue(scrollingView);\n            if (!startScrollPositionFound && scrollPosition) {\n                // We found a scrollingView that does not have scrollTop or scrollLeft 0\n                // Return the scroll position value, as this will be our startScrollPosition\n                pageScrollInstance.startScrollPosition = scrollPosition;\n                startScrollPositionFound = true;\n            }\n        });\n        var pageScrollOffset = pageScrollInstance.getCurrentOffset();\n        // Calculate the target position that the scroll animation should go to\n        var scrollTargetPosition = pageScrollInstance.extractScrollTargetPosition();\n        pageScrollInstance.targetScrollPosition = Math.round((pageScrollInstance.verticalScrolling ? scrollTargetPosition.top : scrollTargetPosition.left) - pageScrollOffset);\n        // Calculate the distance we need to go in total\n        pageScrollInstance.distanceToScroll = pageScrollInstance.targetScrollPosition - pageScrollInstance.startScrollPosition;\n        if (isNaN(pageScrollInstance.distanceToScroll)) {\n            // We weren't able to find the target position, maybe the element does not exist?\n            if (isDevMode()) {\n                console.log('Scrolling not possible, as we can\\'t find the specified target');\n            }\n            pageScrollInstance.fireEvent(false);\n            return;\n        }\n        // We're at the final destination already\n        // OR we need to scroll down but are already at the end\n        // OR we need to scroll up but are at the top already\n        var allReadyAtDestination = Math.abs(pageScrollInstance.distanceToScroll) < PageScrollConfig._minScrollDistance;\n        // Check how long we need to scroll if a speed option is given\n        // Default executionDuration is the specified duration\n        pageScrollInstance.executionDuration = pageScrollInstance.duration;\n        // Maybe we need to pay attention to the speed option?\n        if (!Util.isUndefinedOrNull(pageScrollInstance.speed) && Util.isUndefinedOrNull(pageScrollInstance.duration)) {\n            // Speed option is set and no duration => calculate duration based on speed and scroll distance\n            pageScrollInstance.executionDuration = pageScrollInstance.distanceToScroll / pageScrollInstance.speed * 1000;\n        }\n        // We should go there directly, as our \"animation\" would have one big step\n        // only anyway and this way we save the interval stuff\n        var tooShortInterval = pageScrollInstance.executionDuration <= PageScrollConfig._interval;\n        if (allReadyAtDestination || tooShortInterval) {\n            if (isDevMode()) {\n                if (allReadyAtDestination) {\n                    console.log('Scrolling not possible, as we can\\'t get any closer to the destination');\n                }\n                else {\n                    console.log('Scroll duration shorter that interval length, jumping to target');\n                }\n            }\n            pageScrollInstance.setScrollPosition(pageScrollInstance.targetScrollPosition);\n            pageScrollInstance.fireEvent(true);\n            return;\n        }\n        // Register the interrupt listeners if we want an interruptible scroll animation\n        if (pageScrollInstance.interruptible ||\n            (Util.isUndefinedOrNull(pageScrollInstance.interruptible) && PageScrollConfig.defaultInterruptible)) {\n            pageScrollInstance.attachInterruptListeners(this.onInterrupted);\n        }\n        // Let's get started, get the start time...\n        pageScrollInstance.startTime = new Date().getTime();\n        // .. and calculate the end time (when we need to finish at last)\n        pageScrollInstance.endTime = pageScrollInstance.startTime + pageScrollInstance.executionDuration;\n        pageScrollInstance.timer = setInterval(function (_pageScrollInstance) {\n            // Take the current time\n            var currentTime = new Date().getTime();\n            // Determine the new scroll position\n            var newScrollPosition;\n            var stopNow = false;\n            if (_pageScrollInstance.endTime <= currentTime) {\n                // We're over the time already, so go the targetScrollPosition (aka destination)\n                newScrollPosition = _pageScrollInstance.targetScrollPosition;\n                stopNow = true;\n            }\n            else {\n                // Calculate the scroll position based on the current time using the easing function\n                newScrollPosition = Math.round(_pageScrollInstance.easingLogic.ease(currentTime - _pageScrollInstance.startTime, _pageScrollInstance.startScrollPosition, _pageScrollInstance.distanceToScroll, _pageScrollInstance.executionDuration));\n            }\n            // Set the new scrollPosition to all scrollingViews elements\n            if (!_pageScrollInstance.setScrollPosition(newScrollPosition)) {\n                // Setting the new scrollTop/scrollLeft value failed for all ScrollingViews\n                // early stop the scroll animation to save resources\n                stopNow = true;\n            }\n            // At the end do the internal stop maintenance and fire the pageScrollFinish event\n            // (otherwise the event might arrive at \"too early\")\n            if (stopNow) {\n                _this.stopInternal(false, _pageScrollInstance);\n            }\n        }, PageScrollConfig._interval, pageScrollInstance);\n        // Register the instance as running one\n        this.runningInstances.push(pageScrollInstance);\n    };\n    /**\n     * Stop all running scroll animations. Optionally limit to stop only the ones of specific namespace.\n     *\n     * @param namespace\n     * @returns {boolean}\n     */\n    PageScrollService.prototype.stopAll = function (namespace) {\n        if (this.runningInstances.length > 0) {\n            var stoppedSome = false;\n            for (var i = 0; i < this.runningInstances.length; ++i) {\n                var pageScrollInstance = this.runningInstances[i];\n                if (Util.isUndefinedOrNull(namespace) || namespace.length === 0 ||\n                    pageScrollInstance.namespace === namespace) {\n                    stoppedSome = true;\n                    this.stopInternal(true, pageScrollInstance);\n                    // Decrease the counter, as we removed an item from the array we iterate over\n                    i--;\n                }\n            }\n            return stoppedSome;\n        }\n        return false;\n    };\n    PageScrollService.prototype.stop = function (pageScrollInstance) {\n        return this.stopInternal(true, pageScrollInstance);\n    };\n    return PageScrollService;\n}());\nexport { PageScrollService };\nPageScrollService.instanceCounter = 0;\nPageScrollService.decorators = [\n    { type: Injectable },\n];\n/** @nocollapse */\nPageScrollService.ctorParameters = function () { return []; };\n","/home/travis/build/npmtest/node-npmtest-ng2-page-scroll/node_modules/ng2-page-scroll/src/ng2-page-scroll-util.service.js":"/**\n * Created by sebastianfuss on 02.09.16.\n */\nvar PageScrollUtilService = (function () {\n    function PageScrollUtilService() {\n    }\n    /**\n     * Util method to check whether a given variable is either undefined or null\n     * @param variable\n     * @returns {boolean} true the variable is undefined or null\n     */\n    PageScrollUtilService.isUndefinedOrNull = function (variable) {\n        return (typeof variable === 'undefined') || variable === undefined || variable === null;\n    };\n    PageScrollUtilService.extractElementPosition = function (document, scrollTargetElement) {\n        var body = document.body;\n        var docEl = document.documentElement;\n        var windowPageYOffset = document.defaultView && document.defaultView.pageYOffset || undefined;\n        var windowPageXOffset = document.defaultView && document.defaultView.pageXOffset || undefined;\n        var scrollTop = windowPageYOffset || docEl.scrollTop || body.scrollTop;\n        var scrollLeft = windowPageXOffset || docEl.scrollLeft || body.scrollLeft;\n        var clientTop = docEl.clientTop || body.clientTop || 0;\n        var clientLeft = docEl.clientLeft || body.clientLeft || 0;\n        if (PageScrollUtilService.isUndefinedOrNull(scrollTargetElement)) {\n            // No element found, so return the current position to not cause any change in scroll position\n            return { top: scrollTop, left: scrollLeft };\n        }\n        var box = scrollTargetElement.getBoundingClientRect();\n        var top = box.top + scrollTop - clientTop;\n        var left = box.left + scrollLeft - clientLeft;\n        return { top: Math.round(top), left: Math.round(left) };\n    };\n    return PageScrollUtilService;\n}());\nexport { PageScrollUtilService };\n"}